name: Environment Deploy

on:
  workflow_dispatch:
    inputs:
      ressource_group:
        description: 'Name of the ressource group that will be provisionned'
        required: true
        default: 'GH-Rover'
      environment:
        type: environment
        default: 'production'


permissions: 
  id-token: write

env:
  APP_GW_NAME: GHRoverAppGateway
  VNET_NAME: GHRoverVNet
  APP_GW_SUBNET_NAME: appGatewaySubnet
  BACKEND_SUBNET_NAME: backendSubnet
  VAULT_NAME: GHRoverVaultTest
  CERT_NAME: GHRoverWebHookCert
  APP_GW_IDENTITY: AppGatewayIdentity
  PROM_CLIENT_BACKEND_POOL: prometheusClientBackendPool
  PROM_BACKEND_POOL: prometheusBackendPool



jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Azure Login
      uses: Azure/login@v1.4.4
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Get Client IP adresses 
      id: clientIPs
      run: |
        echo "::set-output name=value::$(az container list --resource-group ${{ inputs.ressource_group }} --query "[?tags.active == 'true' && tags.type == 'client'].{ipAddress: ipAddress.ip}" | tr -d '\n')"


    - name: Get Prometheus IP adresses 
      id: prometheusIPs
      run: |
        echo "::set-output name=value::$(az container list --resource-group ${{ inputs.ressource_group }} --query "[?tags.active == 'true' && tags.type == 'prometheus'].{ipAddress: ipAddress.ip}" | tr -d '\n')"
        
    - name: Deploy the network environment 
      run: |
        az deployment group create --resource-group ${{ inputs.ressource_group }} --template-file deploy/network.bicep  \
            --parameters appGatewayName=${{ env.APP_GW_NAME }} \
                appGatewayIdentityName=${{ env.APP_GW_IDENTITY }} appGatewaySubnetName=${{ env.APP_GW_SUBNET_NAME }} \
                virtualNetworkName=${{ env.VNET_NAME }} vaultName=${{ env.VAULT_NAME }} certName=${{ env.CERT_NAME }}  \
                backendSubnetName=${{ env.BACKEND_SUBNET_NAME }} \
                prometheusClientBackendPoolName=${{ env.PROM_CLIENT_BACKEND_POOL }} prometheusBackendPoolName=${{ env.PROM_BACKEND_POOL }} \
                prometheusIPs=${{ steps.prometheusIPs.outputs.value }} \
                prometheusClientIPs=${{ steps.clientIPs.outputs.value }}
                
