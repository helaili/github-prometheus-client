name: Build & Deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RESOURCE_GROUP: GH-Rover
  APP_GW_NAME: GHRoverAppGateway
  CONTAINER_GROUP_PREFIX: github-prometheus-client
  CONTAINER_GROUP_NAME: unknown yet
  PORT: 8080
  BACKEND_SUBNET_NAME: backendSubnet
  PROM_CLIENT_BACKEND_POOL: prometheusClientBackendPool
  VNET_NAME: GHRoverVNet
  REDIS_SERVER_NAME: ghrover-redis

permissions: 
  id-token: write
  packages: write

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build
      run: make build

    - name: Test
      run: make test
      env:
        APP_ID: ${{ secrets.APP_ID }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Azure Login
      uses: Azure/login@v1.4.4
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Get currently deployed container ids
      run: echo "OLD_CONTAINER_IDS=$(az container list --resource-group ${{ env.RESOURCE_GROUP }} --query '[].id' --out tsv)" >> $GITHUB_ENV
  
    - name: Set the new container app name
      run: echo "CONTAINER_GROUP_NAME=${{ env.CONTAINER_GROUP_PREFIX }}-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Create container app
      run: |
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file deploy/client.bicep \
          --parameters containerGroupName=${{ env.CONTAINER_GROUP_NAME }} \
            registryPassword=${{ secrets.REGISTRY_PASSWORD }} registryUsername=${{ secrets.REGISTRY_USERNAME }} \
            app_id=${{ secrets.APP_ID }} webhook_secret=${{ secrets.WEBHOOK_SECRET }} private_key=${{ secrets.PRIVATE_KEY }} \
            redisServerName=${{ env.REDIS_SERVER_NAME }} \
            virtualNetworkName=${{ env.VNET_NAME }} backendSubnetName=${{ env.BACKEND_SUBNET_NAME }} \
            portNumber=${{ env.PORT }} environment=production
    
    - name: Update application gateway
      run: | 
        echo "IP_ADDRESS=$(az container show --name ${{ env.CONTAINER_GROUP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "ipAddress.ip" --out tsv)" >> $GITHUB_ENV
        echo "BACKEND_ADDRESSES=[{\"ipAddress\":\"${{ env.IP_ADDRESS }}\"}]" >> $GITHUB_ENV
        az network application-gateway address-pool update \
          --resource-group ${{ env.RESOURCE_GROUP }}  \
          --gateway-name ${{ env.APP_GW_NAME }} \
          --name ${{ env.PROM_CLIENT_BACKEND_POOL }} \
          --set backendAddresses=${{ env.BACKEND_ADDRESSES }}


        
