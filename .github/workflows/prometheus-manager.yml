name: Prometheus Deployment Manager

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: GH-Rover
  STORAGE_NAME: ghroverstorage
  BACKEND_SUBNET_NAME: backendSubnet
  VNET_NAME: GHRoverVNet
  
permissions: 
  id-token: write

jobs:
  manage:
    name: Manage
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Azure Login
      uses: Azure/login@v1.4.4
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Retrieve current prometheus installations
      id: promInstalls
      run: |
        installations=$(az container list --resource-group $RESOURCE_GROUP --query "[?tags.type == 'prometheus'].tags")
        installations=${installations//$'\n'/}
        echo "::set-output name=value::${installations}"
    
    - name: Restore the key format
      id: restoreKey
      run: |
        privateKey=$(echo ${{ secrets.PRIVATE_KEY  }} | sed 's/\^/\n/g')
        privateKey="${privateKey//'%'/'%25'}"
        privateKey="${privateKey//'%'/'%25'}"
        privateKey="${privateKey//$'\n'/'%0A'}"
        privateKey="${privateKey//$'\r'/'%0D'}"
        echo "::add-mask::${privateKey}"
        echo "::set-output name=value::${privateKey}"
    
    - name: Retrieve current app installations
      id: appInstalls
      uses: helaili/github-app-installations@main
      with:
        private-key: ${{ steps.restoreKey.outputs.value }}
        app-id: ${{ secrets.APP_ID }}
    
    - name: Process installations
      uses: actions/github-script@v6
      with:
        script: |
          console.log(${{ steps.promInstalls.outputs.value }})
          console.log(${{ steps.appInstalls.outputs.value }})

          const promInstalls=JSON.parse(${{ steps.promInstalls.outputs.value }})
          const appInstalls=JSON.parse(${{ steps.appInstalls.outputs.value }})

          for (const promInstall of promInstalls) {
            console.log(`Checking prometheus installation ${promInstall.name}`)
            for (const [index, appInstall] of appInstalls) {
              console.log(`Checking for match with ${appInstall.id}`)
              if (promInstall.name == appInstall.id) {
                console.log('Found match')
                appInstalls.delete(index)
                break;
              }
            }
          }